// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/21/2024 19:52:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PROCESSOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PROCESSOR_vlg_sample_tst(
	A,
	B,
	clk,
	datain,
	enable,
	reset,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  clk;
input  datain;
input  enable;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clk or datain or enable or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PROCESSOR_vlg_check_tst (
	Aout,
	Bout,
	neg1,
	neg2,
	r1,
	r2,
	student,
	sampler_rx
);
input [7:0] Aout;
input [7:0] Bout;
input [0:6] neg1;
input [0:6] neg2;
input [0:6] r1;
input [0:6] r2;
input [0:6] student;
input sampler_rx;

reg [7:0] Aout_expected;
reg [7:0] Bout_expected;
reg [0:6] neg1_expected;
reg [0:6] neg2_expected;
reg [0:6] r1_expected;
reg [0:6] r2_expected;
reg [0:6] student_expected;

reg [7:0] Aout_prev;
reg [7:0] Bout_prev;
reg [0:6] neg1_prev;
reg [0:6] neg2_prev;
reg [0:6] r1_prev;
reg [0:6] r2_prev;
reg [0:6] student_prev;

reg [7:0] Aout_expected_prev;
reg [7:0] Bout_expected_prev;
reg [0:6] r1_expected_prev;
reg [0:6] r2_expected_prev;

reg [7:0] last_Aout_exp;
reg [7:0] last_Bout_exp;
reg [0:6] last_r1_exp;
reg [0:6] last_r2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	Aout_prev = Aout;
	Bout_prev = Bout;
	neg1_prev = neg1;
	neg2_prev = neg2;
	r1_prev = r1;
	r2_prev = r2;
	student_prev = student;
end

// update expected /o prevs

always @(trigger)
begin
	Aout_expected_prev = Aout_expected;
	Bout_expected_prev = Bout_expected;
	r1_expected_prev = r1_expected;
	r2_expected_prev = r2_expected;
end


// expected Aout[ 7 ]
initial
begin
	Aout_expected[7] = 1'bX;
end 
// expected Aout[ 6 ]
initial
begin
	Aout_expected[6] = 1'bX;
end 
// expected Aout[ 5 ]
initial
begin
	Aout_expected[5] = 1'bX;
end 
// expected Aout[ 4 ]
initial
begin
	Aout_expected[4] = 1'bX;
end 
// expected Aout[ 3 ]
initial
begin
	Aout_expected[3] = 1'bX;
end 
// expected Aout[ 2 ]
initial
begin
	Aout_expected[2] = 1'bX;
end 
// expected Aout[ 1 ]
initial
begin
	Aout_expected[1] = 1'bX;
end 
// expected Aout[ 0 ]
initial
begin
	Aout_expected[0] = 1'bX;
end 
// expected Bout[ 7 ]
initial
begin
	Bout_expected[7] = 1'bX;
end 
// expected Bout[ 6 ]
initial
begin
	Bout_expected[6] = 1'bX;
end 
// expected Bout[ 5 ]
initial
begin
	Bout_expected[5] = 1'bX;
end 
// expected Bout[ 4 ]
initial
begin
	Bout_expected[4] = 1'bX;
end 
// expected Bout[ 3 ]
initial
begin
	Bout_expected[3] = 1'bX;
end 
// expected Bout[ 2 ]
initial
begin
	Bout_expected[2] = 1'bX;
end 
// expected Bout[ 1 ]
initial
begin
	Bout_expected[1] = 1'bX;
end 
// expected Bout[ 0 ]
initial
begin
	Bout_expected[0] = 1'bX;
end 
// expected r1[ 6 ]
initial
begin
	r1_expected[6] = 1'bX;
end 
// expected r1[ 5 ]
initial
begin
	r1_expected[5] = 1'bX;
end 
// expected r1[ 4 ]
initial
begin
	r1_expected[4] = 1'bX;
end 
// expected r1[ 3 ]
initial
begin
	r1_expected[3] = 1'bX;
end 
// expected r1[ 2 ]
initial
begin
	r1_expected[2] = 1'bX;
end 
// expected r1[ 1 ]
initial
begin
	r1_expected[1] = 1'bX;
end 
// expected r1[ 0 ]
initial
begin
	r1_expected[0] = 1'bX;
end 
// expected r2[ 6 ]
initial
begin
	r2_expected[6] = 1'bX;
end 
// expected r2[ 5 ]
initial
begin
	r2_expected[5] = 1'bX;
end 
// expected r2[ 4 ]
initial
begin
	r2_expected[4] = 1'bX;
end 
// expected r2[ 3 ]
initial
begin
	r2_expected[3] = 1'bX;
end 
// expected r2[ 2 ]
initial
begin
	r2_expected[2] = 1'bX;
end 
// expected r2[ 1 ]
initial
begin
	r2_expected[1] = 1'bX;
end 
// expected r2[ 0 ]
initial
begin
	r2_expected[0] = 1'bX;
end 
// generate trigger
always @(Aout_expected or Aout or Bout_expected or Bout or neg1_expected or neg1 or neg2_expected or neg2 or r1_expected or r1 or r2_expected or r2 or student_expected or student)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Aout = %b | expected Bout = %b | expected neg1 = %b | expected neg2 = %b | expected r1 = %b | expected r2 = %b | expected student = %b | ",Aout_expected_prev,Bout_expected_prev,neg1_expected_prev,neg2_expected_prev,r1_expected_prev,r2_expected_prev,student_expected_prev);
	$display("| real Aout = %b | real Bout = %b | real neg1 = %b | real neg2 = %b | real r1 = %b | real r2 = %b | real student = %b | ",Aout_prev,Bout_prev,neg1_prev,neg2_prev,r1_prev,r2_prev,student_prev);
`endif
	if (
		( Aout_expected_prev[0] !== 1'bx ) && ( Aout_prev[0] !== Aout_expected_prev[0] )
		&& ((Aout_expected_prev[0] !== last_Aout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[0] = Aout_expected_prev[0];
	end
	if (
		( Aout_expected_prev[1] !== 1'bx ) && ( Aout_prev[1] !== Aout_expected_prev[1] )
		&& ((Aout_expected_prev[1] !== last_Aout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[1] = Aout_expected_prev[1];
	end
	if (
		( Aout_expected_prev[2] !== 1'bx ) && ( Aout_prev[2] !== Aout_expected_prev[2] )
		&& ((Aout_expected_prev[2] !== last_Aout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[2] = Aout_expected_prev[2];
	end
	if (
		( Aout_expected_prev[3] !== 1'bx ) && ( Aout_prev[3] !== Aout_expected_prev[3] )
		&& ((Aout_expected_prev[3] !== last_Aout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[3] = Aout_expected_prev[3];
	end
	if (
		( Aout_expected_prev[4] !== 1'bx ) && ( Aout_prev[4] !== Aout_expected_prev[4] )
		&& ((Aout_expected_prev[4] !== last_Aout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[4] = Aout_expected_prev[4];
	end
	if (
		( Aout_expected_prev[5] !== 1'bx ) && ( Aout_prev[5] !== Aout_expected_prev[5] )
		&& ((Aout_expected_prev[5] !== last_Aout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[5] = Aout_expected_prev[5];
	end
	if (
		( Aout_expected_prev[6] !== 1'bx ) && ( Aout_prev[6] !== Aout_expected_prev[6] )
		&& ((Aout_expected_prev[6] !== last_Aout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[6] = Aout_expected_prev[6];
	end
	if (
		( Aout_expected_prev[7] !== 1'bx ) && ( Aout_prev[7] !== Aout_expected_prev[7] )
		&& ((Aout_expected_prev[7] !== last_Aout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aout_expected_prev);
		$display ("     Real value = %b", Aout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Aout_exp[7] = Aout_expected_prev[7];
	end
	if (
		( Bout_expected_prev[0] !== 1'bx ) && ( Bout_prev[0] !== Bout_expected_prev[0] )
		&& ((Bout_expected_prev[0] !== last_Bout_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[0] = Bout_expected_prev[0];
	end
	if (
		( Bout_expected_prev[1] !== 1'bx ) && ( Bout_prev[1] !== Bout_expected_prev[1] )
		&& ((Bout_expected_prev[1] !== last_Bout_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[1] = Bout_expected_prev[1];
	end
	if (
		( Bout_expected_prev[2] !== 1'bx ) && ( Bout_prev[2] !== Bout_expected_prev[2] )
		&& ((Bout_expected_prev[2] !== last_Bout_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[2] = Bout_expected_prev[2];
	end
	if (
		( Bout_expected_prev[3] !== 1'bx ) && ( Bout_prev[3] !== Bout_expected_prev[3] )
		&& ((Bout_expected_prev[3] !== last_Bout_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[3] = Bout_expected_prev[3];
	end
	if (
		( Bout_expected_prev[4] !== 1'bx ) && ( Bout_prev[4] !== Bout_expected_prev[4] )
		&& ((Bout_expected_prev[4] !== last_Bout_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[4] = Bout_expected_prev[4];
	end
	if (
		( Bout_expected_prev[5] !== 1'bx ) && ( Bout_prev[5] !== Bout_expected_prev[5] )
		&& ((Bout_expected_prev[5] !== last_Bout_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[5] = Bout_expected_prev[5];
	end
	if (
		( Bout_expected_prev[6] !== 1'bx ) && ( Bout_prev[6] !== Bout_expected_prev[6] )
		&& ((Bout_expected_prev[6] !== last_Bout_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[6] = Bout_expected_prev[6];
	end
	if (
		( Bout_expected_prev[7] !== 1'bx ) && ( Bout_prev[7] !== Bout_expected_prev[7] )
		&& ((Bout_expected_prev[7] !== last_Bout_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bout_exp[7] = Bout_expected_prev[7];
	end
	if (
		( r1_expected_prev[0] !== 1'bx ) && ( r1_prev[0] !== r1_expected_prev[0] )
		&& ((r1_expected_prev[0] !== last_r1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r1_exp[0] = r1_expected_prev[0];
	end
	if (
		( r1_expected_prev[1] !== 1'bx ) && ( r1_prev[1] !== r1_expected_prev[1] )
		&& ((r1_expected_prev[1] !== last_r1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r1_exp[1] = r1_expected_prev[1];
	end
	if (
		( r1_expected_prev[2] !== 1'bx ) && ( r1_prev[2] !== r1_expected_prev[2] )
		&& ((r1_expected_prev[2] !== last_r1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r1_exp[2] = r1_expected_prev[2];
	end
	if (
		( r1_expected_prev[3] !== 1'bx ) && ( r1_prev[3] !== r1_expected_prev[3] )
		&& ((r1_expected_prev[3] !== last_r1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r1_exp[3] = r1_expected_prev[3];
	end
	if (
		( r1_expected_prev[4] !== 1'bx ) && ( r1_prev[4] !== r1_expected_prev[4] )
		&& ((r1_expected_prev[4] !== last_r1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r1_exp[4] = r1_expected_prev[4];
	end
	if (
		( r1_expected_prev[5] !== 1'bx ) && ( r1_prev[5] !== r1_expected_prev[5] )
		&& ((r1_expected_prev[5] !== last_r1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r1_exp[5] = r1_expected_prev[5];
	end
	if (
		( r1_expected_prev[6] !== 1'bx ) && ( r1_prev[6] !== r1_expected_prev[6] )
		&& ((r1_expected_prev[6] !== last_r1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r1_exp[6] = r1_expected_prev[6];
	end
	if (
		( r2_expected_prev[0] !== 1'bx ) && ( r2_prev[0] !== r2_expected_prev[0] )
		&& ((r2_expected_prev[0] !== last_r2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r2_exp[0] = r2_expected_prev[0];
	end
	if (
		( r2_expected_prev[1] !== 1'bx ) && ( r2_prev[1] !== r2_expected_prev[1] )
		&& ((r2_expected_prev[1] !== last_r2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r2_exp[1] = r2_expected_prev[1];
	end
	if (
		( r2_expected_prev[2] !== 1'bx ) && ( r2_prev[2] !== r2_expected_prev[2] )
		&& ((r2_expected_prev[2] !== last_r2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r2_exp[2] = r2_expected_prev[2];
	end
	if (
		( r2_expected_prev[3] !== 1'bx ) && ( r2_prev[3] !== r2_expected_prev[3] )
		&& ((r2_expected_prev[3] !== last_r2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r2_exp[3] = r2_expected_prev[3];
	end
	if (
		( r2_expected_prev[4] !== 1'bx ) && ( r2_prev[4] !== r2_expected_prev[4] )
		&& ((r2_expected_prev[4] !== last_r2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r2_exp[4] = r2_expected_prev[4];
	end
	if (
		( r2_expected_prev[5] !== 1'bx ) && ( r2_prev[5] !== r2_expected_prev[5] )
		&& ((r2_expected_prev[5] !== last_r2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r2_exp[5] = r2_expected_prev[5];
	end
	if (
		( r2_expected_prev[6] !== 1'bx ) && ( r2_prev[6] !== r2_expected_prev[6] )
		&& ((r2_expected_prev[6] !== last_r2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r2_exp[6] = r2_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PROCESSOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg clk;
reg datain;
reg enable;
reg reset;
// wires                                               
wire [7:0] Aout;
wire [7:0] Bout;
wire [0:6] neg1;
wire [0:6] neg2;
wire [0:6] r1;
wire [0:6] r2;
wire [0:6] student;

wire sampler;                             

// assign statements (if any)                          
PROCESSOR i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.Aout(Aout),
	.B(B),
	.Bout(Bout),
	.clk(clk),
	.datain(datain),
	.enable(enable),
	.neg1(neg1),
	.neg2(neg2),
	.r1(r1),
	.r2(r2),
	.reset(reset),
	.student(student)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 

// datain
initial
begin
	datain = 1'b0;
	datain = #80000 1'b1;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

PROCESSOR_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clk(clk),
	.datain(datain),
	.enable(enable),
	.reset(reset),
	.sampler_tx(sampler)
);

PROCESSOR_vlg_check_tst tb_out(
	.Aout(Aout),
	.Bout(Bout),
	.neg1(neg1),
	.neg2(neg2),
	.r1(r1),
	.r2(r2),
	.student(student),
	.sampler_rx(sampler)
);
endmodule

